local utils = require "user.utils"
local Log = require "user.core.log"

local M = {}
local user_config_dir = get_config_dir()
local user_config_file = utils.join_paths(user_config_dir, "config.lua")

--- Get the full path to the user configuration file
--- @return string
function M:get_user_config_path()
  return user_config_file
end

--- Initialize nvim default configuration and variables
function M:init()
  nvim = vim.deepcopy(require "user.config.defaults")

  -- require("lvim.keymappings").load_defaults()

  local settings = require "user.config.settings"
  settings.load_defaults()
end

--- Override the configuration with a user provided one
--- @param config_path string The path to the user configuration
function M:load(config_path)
  local autocmds = reload "user.core.autocmds"
  config_path = config_path or self:get_user_config_path()
  local ok, err = pcall(dofile, config_path)
  if not ok then
    if utils.is_file(user_config_file) then
      vim.schedule(function()
        Log:warn("Invalid configuration: " .. err)
      end)
    else
      vim.schedule(function()
        vim.notify_once(
          string.format("User-configuration not found. Creating an example configuration in %s", config_path)
        )
      end)
      local config_name = vim.loop.os_uname().version:match "Windows" and "config_win" or "config"
      local example_config = join_paths(get_nvim_base_dir(), "utils", "installer", config_name .. ".example.lua")
      vim.fn.mkdir(user_config_dir, "p")
      vim.loop.fs_copyfile(example_config, config_path)
    end
  end

  Log:set_level(nvim.log.level)

  autocmds.define_autocmds(nvim.autocommands)

  vim.g.mapleader = (nvim.leader == "space" and " ") or nvim.leader

  reload("usel.keymappings").load(nvim.keys)
end

return M

